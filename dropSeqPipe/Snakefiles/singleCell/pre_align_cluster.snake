"""Generate pre alignement steps."""


# Configfile
configfile: 'config.yaml'

# Executables
TMPDIR = config['TMPDIR']
PICARD = config['PICARD']
DROPSEQ = config['DROPSEQ']

starttrim_length = round(max((config['GLOBAL']['Cell_barcode']['end'] - config['GLOBAL']['Cell_barcode']['start'] + 1)/2,5))


rule all:
	input: expand('{sample}_tagged_unmapped.fastq.gz', sample=config['Samples'])


rule fastq_to_sam:
	"""Create an empty bam file linking cell/UMI barcodes to reads"""
	input:
		r1='{sample}_R1.fastq.gz',
		r2='{sample}_R2.fastq.gz'
	output:
		temp('{sample}_unaligned.bam')
	threads: 1
	shell:
		"""java -Djava.io.tmpdir={TMPDIR} -Xmx500m -jar {PICARD} FastqToSam\
		F1={input.r1}\
		F2={input.r2}\
		SM=DS O={output}"""


rule barcode_qual:
	input: '{sample}_unaligned.bam'
	output: temp('{sample}_bc.bam')
	params:
		BC_summary = 'logs/{sample}_CELL_barcode.txt',
		BC_start = config['GLOBAL']['Cell_barcode']['start'],
		BC_end = config['GLOBAL']['Cell_barcode']['end'],
		BC_min_quality = config['GLOBAL']['Cell_barcode']['min_quality'],
		BC_min_quality_num = config['GLOBAL']['Cell_barcode']['num_below_quality'],
	threads: 1
	shell:
		"""{DROPSEQ}/TagBamWithReadSequenceExtended\
		SUMMARY={params.BC_summary}\
		BASE_RANGE={params.BC_start}-{params.BC_end}\
		BASE_QUALITY={params.BC_min_quality}\
		BARCODED_READ=1\
		DISCARD_READ=false\
		TAG_NAME=XC\
		NUM_BASES_BELOW_QUALITY={params.BC_min_quality_num}\
		INPUT={input}\
		OUTPUT={output}"""

rule UMI_qual:
	input: '{sample}_bc.bam'
	output: temp('{sample}_umi.bam')
	params:
		UMI_summary = 'logs/{sample}_UMI_barcode.txt',
		UMI_start = config['GLOBAL']['UMI']['start'],
		UMI_end = config['GLOBAL']['UMI']['end'],
		UMI_min_quality = config['GLOBAL']['UMI']['min_quality'],
		UMI_min_quality_num = config['GLOBAL']['Cell_barcode']['num_below_quality'],
	threads: 1
	shell:
		"""
		{DROPSEQ}/TagBamWithReadSequenceExtended\
		SUMMARY={params.UMI_summary}\
		BASE_RANGE={params.UMI_start}-{params.UMI_end}\
		BASE_QUALITY={params.UMI_min_quality}\
		BARCODED_READ=1\
		DISCARD_READ=true\
		TAG_NAME=XM\
		NUM_BASES_BELOW_QUALITY={params.UMI_min_quality_num}\
		INPUT={input}\
		OUTPUT={output}"""
rule filter_out:
	input: '{sample}_umi.bam'
	output: temp('{sample}_filtered.bam')
	threads: 1
	shell:
		"""{DROPSEQ}/FilterBAM TAG_REJECT=XQ\
		INPUT={input}\
		OUTPUT={output}"""

rule trim_start:
	input: '{sample}_filtered.bam'
	output: temp('{sample}_filtered_start_trim.bam')
	threads: 1
	params:
			start_trim = 'logs/{sample}_start_trim.txt',
			SmartAdapter = config['GLOBAL']['5PrimeSmartAdapter'],
	shell:
		"""{DROPSEQ}/TrimStartingSequence\
		OUTPUT_SUMMARY={params.start_trim}\
		SEQUENCE={params.SmartAdapter}\
		MISMATCHES=0\
		NUM_BASES={starttrim_length}\
		INPUT={input}\
		OUTPUT={output}"""

rule trim_poly:
	input: '{sample}_filtered_start_trim.bam'
	output: temp('{sample}_tagged_unmapped.bam')
	threads: 1
	params:
			polyA_trim = 'logs/{sample}_polyA_trim.txt',
	shell:
		"""{DROPSEQ}/PolyATrimmer\
		OUTPUT_SUMMARY={params.polyA_trim}\
		MISMATCHES=0\
		NUM_BASES=6\
		OUTPUT={output}\
		INPUT={input}"""

rule sam_to_fastq:
	input: '{sample}_tagged_unmapped.bam'
	output: '{sample}_tagged_unmapped.fastq'
	threads: 1
	shell:
		"""java -Xmx500m -jar -Djava.io.tmpdir={TMPDIR}	{PICARD} SamToFastq\
		INPUT={input}\
		FASTQ={output}"""

rule gzip:
	input: '{sample}_tagged_unmapped.fastq'
	output: '{sample}_tagged_unmapped.fastq.gz'
	threads: 1
	shell:
		"""gzip {input}"""